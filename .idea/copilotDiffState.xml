<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/core/config.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/core/config.py" />
              <option name="originalContent" value="from pydantic_settings import BaseSettings, SettingsConfigDict&#10;from typing import Annotated, Any, Literal&#10;&#10;from pydantic import (&#10;    AnyUrl,&#10;    BeforeValidator,&#10;    computed_field,&#10;    Field&#10;)&#10;&#10;&#10;def parse_cors(v: Any) -&gt; list[str] | str:&#10;    if isinstance(v, str) and not v.startswith(&quot;[&quot;):&#10;        return [i.strip() for i in v.split(&quot;,&quot;)]&#10;    elif isinstance(v, list | str):&#10;        return v&#10;    raise ValueError(v)&#10;&#10;&#10;class Settings(BaseSettings):&#10;    model_config = SettingsConfigDict(&#10;        env_file='.env',&#10;        env_file_encoding='utf-8',&#10;        extra=&quot;ignore&quot;,&#10;        env_ignore_empty = True,&#10;    )&#10;    DOMAIN: str = 'localhost'&#10;    ENVIRONMENT: Literal[&quot;local&quot;, &quot;staging&quot;, &quot;production&quot;] = &quot;local&quot;&#10;    JWT_SECRET_KEY: str&#10;&#10;    @computed_field&#10;    @property&#10;    def server_host(self) -&gt; str:&#10;        # Use HTTPS for anything other than local development&#10;        if self.ENVIRONMENT == &quot;local&quot;:&#10;            return f&quot;http://{self.DOMAIN}&quot;&#10;        return f&quot;https://{self.DOMAIN}&quot;&#10;&#10;    BACKEND_CORS_ORIGINS: Annotated[list[AnyUrl] | str, BeforeValidator(parse_cors)] = Field(default=lambda: [])&#10;    BACKEND_CORS_ORIGINS: Annotated[list[AnyUrl] | str, BeforeValidator(parse_cors)]&#10;    MARIADB_USERNAME: str&#10;    MARIADB_SERVER: str&#10;    MARIADB_PORT: int&#10;    MARIADB_DATABASE: str&#10;&#10;    @computed_field&#10;    @property&#10;    def SQLALCHEMY_DATABASE_URI(self) -&gt; str:&#10;        # Return simple string instead of complex MariaDBDsn to prevent validation hanging&#10;        return f&quot;mysql+pymysql://{self.MARIADB_USERNAME}:{self.MARIADB_PASSWORD}@{self.MARIADB_SERVER}:{self.MARIADB_PORT}/{self.MARIADB_DATABASE}&quot;&#10;        # Check if Railway provides a DATABASE_URL&#10;        if os.getenv(&quot;DATABASE_URL&quot;):&#10;            return os.getenv(&quot;DATABASE_URL&quot;)&#10;        # Fallback to manual configuration&#10;        return f&quot;mysql+pymysql://{self.MARIADB_USERNAME}:{self.MARIADB_PASSWORD}@{self.MARIADB_SERVER}:{self.MARIADB_PORT}/{self.MARIADB_DATABASE}&quot;&#10;&#10;" />
              <option name="updatedContent" value="from pydantic_settings import BaseSettings, SettingsConfigDict&#10;from typing import Annotated, Any, Literal&#10;&#10;from pydantic import (&#10;    AnyUrl,&#10;    BeforeValidator,&#10;    computed_field,&#10;    Field&#10;)&#10;&#10;&#10;def parse_cors(v: Any) -&gt; list[str] | str:&#10;    if isinstance(v, str) and not v.startswith(&quot;[&quot;):&#10;        return [i.strip() for i in v.split(&quot;,&quot;)]&#10;    elif isinstance(v, list | str):&#10;        return v&#10;    raise ValueError(v)&#10;&#10;&#10;class Settings(BaseSettings):&#10;    model_config = SettingsConfigDict(&#10;        env_file='.env',&#10;        env_file_encoding='utf-8',&#10;        extra=&quot;ignore&quot;,&#10;        env_ignore_empty = True,&#10;    )&#10;    DOMAIN: str = 'localhost'&#10;    ENVIRONMENT: Literal[&quot;local&quot;, &quot;staging&quot;, &quot;production&quot;] = &quot;local&quot;&#10;    JWT_SECRET_KEY: str&#10;&#10;    @computed_field&#10;    @property&#10;    def server_host(self) -&gt; str:&#10;        # Use HTTPS for anything other than local development&#10;        if self.ENVIRONMENT == &quot;local&quot;:&#10;            return f&quot;http://{self.DOMAIN}&quot;&#10;        return f&quot;https://{self.DOMAIN}&quot;&#10;&#10;    BACKEND_CORS_ORIGINS: Annotated[list[AnyUrl] | str, BeforeValidator(parse_cors)] = Field(default=lambda: [])&#10;&#10;    # Local development variables (from .env)&#10;    MARIADB_USERNAME: str = &quot;&quot;&#10;    MARIADB_PASSWORD: str = &quot;&quot;&#10;    MARIADB_SERVER: str = &quot;&quot;&#10;    MARIADB_PORT: int = 3306&#10;    MARIADB_DATABASE: str = &quot;&quot;&#10;    &#10;    # Railway production variables&#10;    MYSQLUSER: str = &quot;&quot;&#10;    MYSQLPASSWORD: str = &quot;&quot;&#10;    MYSQLHOST: str = &quot;&quot;&#10;    MYSQLPORT: int = 3306&#10;    MYSQLDATABASE: str = &quot;&quot;&#10;&#10;    @computed_field&#10;    @property&#10;    def SQLALCHEMY_DATABASE_URI(self) -&gt; str:&#10;        # Use Railway variables if available (production), otherwise use local variables&#10;        if self.MYSQLUSER and self.MYSQLHOST:&#10;            # Production environment with Railway variables&#10;            return f&quot;mysql+pymysql://{self.MYSQLUSER}:{self.MYSQLPASSWORD}@{self.MYSQLHOST}:{self.MYSQLPORT}/{self.MYSQLDATABASE}&quot;&#10;        else:&#10;            # Local development with .env variables&#10;            return f&quot;mysql+pymysql://{self.MARIADB_USERNAME}:{self.MARIADB_PASSWORD}@{self.MARIADB_SERVER}:{self.MARIADB_PORT}/{self.MARIADB_DATABASE}&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/database/connection.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/database/connection.py" />
              <option name="originalContent" value="from sqlalchemy import create_engine&#10;from sqlalchemy.orm import sessionmaker, DeclarativeBase&#10;from core.config_loader import settings&#10;&#10;# Create database URL but don't test connection during import&#10;DATABASE_URL = str(settings.SQLALCHEMY_DATABASE_URI)&#10;&#10;# Use pool settings to prevent hanging connections&#10;engine = create_engine(&#10;    DATABASE_URL,&#10;    pool_pre_ping=True,&#10;    pool_recycle=300,&#10;    connect_args={&quot;connect_timeout&quot;: 10}&#10;)&#10;SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)&#10;&#10;class Base(DeclarativeBase):&#10;    pass&#10;&#10;def get_db():&#10;    db = SessionLocal()&#10;    try:&#10;        yield db&#10;    finally:&#10;        db.close()" />
              <option name="updatedContent" value="from sqlalchemy import create_engine, text&#10;from sqlalchemy.orm import sessionmaker, DeclarativeBase&#10;from core.config_loader import settings&#10;&#10;# Create database URL but don't test connection during import&#10;DATABASE_URL = str(settings.SQLALCHEMY_DATABASE_URI)&#10;&#10;# Use pool settings to prevent hanging connections&#10;engine = create_engine(&#10;    DATABASE_URL,&#10;    pool_pre_ping=True,&#10;    pool_recycle=300,&#10;    connect_args={&quot;connect_timeout&quot;: 10}&#10;)&#10;SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)&#10;&#10;class Base(DeclarativeBase):&#10;    pass&#10;&#10;def get_db():&#10;    db = SessionLocal()&#10;    try:&#10;        yield db&#10;    finally:&#10;        db.close()" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/database/create-database-mysql.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/database/create-database-mysql.sql" />
              <option name="originalContent" value="-- MySQL Database Schema for Raffles Manager&#10;-- Mode: MySQL&#10;&#10;DROP DATABASE IF EXISTS raffles;&#10;CREATE DATABASE raffles;&#10;USE raffles;&#10;&#10;CREATE TABLE proyects (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    name VARCHAR(100) NOT NULL,&#10;    description TEXT,&#10;    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    isActive BOOLEAN DEFAULT true&#10;);&#10;&#10;CREATE TABLE rafflesSet (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    proyect_id INTEGER,&#10;    name VARCHAR(100) NOT NULL,&#10;    type VARCHAR(8) NOT NULL CHECK (type IN ('online', 'physical')),&#10;    init INTEGER NOT NULL,&#10;    final INTEGER NOT NULL,&#10;    unit_price INTEGER NOT NULL,&#10;    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    CONSTRAINT valid_numbers CHECK (init &lt; final),&#10;    CONSTRAINT unique_set UNIQUE (proyect_id, name),&#10;    FOREIGN KEY (proyect_id) REFERENCES proyects(id)&#10;);&#10;&#10;CREATE TABLE buyers (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    name VARCHAR(100) NOT NULL,&#10;    email VARCHAR(100) UNIQUE NOT NULL,&#10;    phone VARCHAR(20),&#10;    register_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#10;);&#10;&#10;CREATE TABLE raffles (&#10;    set_id INTEGER NOT NULL,&#10;    number INTEGER NOT NULL,&#10;    sell_date TIMESTAMP,&#10;    buyer_id INTEGER,&#10;    payment_method VARCHAR(50) CHECK (payment_method in ('CASH', 'CARD', 'TRANSFER', 'OTHER')),&#10;    state VARCHAR(20) DEFAULT 'available' CHECK (state IN ('available', 'sold', 'reserved')),&#10;    FOREIGN KEY (buyer_id) REFERENCES buyers(id),&#10;    FOREIGN KEY (set_id) REFERENCES rafflesSet(id),&#10;    PRIMARY KEY (set_id, number),&#10;    UNIQUE KEY unique_number (number)&#10;);&#10;&#10;-- Trigger to generate raffle numbers when a new raffleSet is created&#10;DELIMITER //&#10;CREATE TRIGGER generate_raffles&#10;    AFTER INSERT ON rafflesSet&#10;    FOR EACH ROW&#10;BEGIN&#10;    DECLARE i INT DEFAULT NEW.init;&#10;    WHILE i &lt;= NEW.final DO&#10;        INSERT INTO raffles (set_id, number) VALUES (NEW.id, i);&#10;        SET i = i + 1;&#10;    END WHILE;&#10;END//&#10;DELIMITER ;&#10;" />
              <option name="updatedContent" value="-- MySQL Database Schema for Raffles Manager&#10;-- Mode: MySQL&#10;&#10;DROP DATABASE IF EXISTS raffles;&#10;CREATE DATABASE raffles;&#10;USE raffles;&#10;&#10;CREATE TABLE proyects (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    name VARCHAR(100) NOT NULL,&#10;    description TEXT,&#10;    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    isActive BOOLEAN DEFAULT true&#10;);&#10;&#10;CREATE TABLE rafflesSet (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    proyect_id INTEGER,&#10;    name VARCHAR(100) NOT NULL,&#10;    type VARCHAR(8) NOT NULL CHECK (type IN ('online', 'physical')),&#10;    init INTEGER NOT NULL,&#10;    final INTEGER NOT NULL,&#10;    unit_price INTEGER NOT NULL,&#10;    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    CONSTRAINT valid_numbers CHECK (init &lt; final),&#10;    CONSTRAINT unique_set UNIQUE (proyect_id, name),&#10;    FOREIGN KEY (proyect_id) REFERENCES proyects(id)&#10;);&#10;&#10;CREATE TABLE buyers (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    name VARCHAR(100) NOT NULL,&#10;    email VARCHAR(100) UNIQUE NOT NULL,&#10;    phone VARCHAR(20),&#10;    register_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#10;);&#10;&#10;CREATE TABLE raffles (&#10;    set_id INTEGER NOT NULL,&#10;    number INTEGER NOT NULL,&#10;    sell_date TIMESTAMP,&#10;    buyer_id INTEGER,&#10;    payment_method VARCHAR(50) CHECK (payment_method in ('CASH', 'CARD', 'TRANSFER', 'OTHER')),&#10;    state VARCHAR(20) DEFAULT 'available' CHECK (state IN ('available', 'sold', 'reserved')),&#10;    FOREIGN KEY (buyer_id) REFERENCES buyers(id),&#10;    FOREIGN KEY (set_id) REFERENCES rafflesSet(id),&#10;    PRIMARY KEY (set_id, number),&#10;    UNIQUE KEY unique_number (number)&#10;);&#10;&#10;DELIMITER //&#10;CREATE TRIGGER generate_raffles&#10;    AFTER INSERT ON rafflesSet&#10;    FOR EACH ROW&#10;BEGIN&#10;    DECLARE i INT DEFAULT NEW.init;&#10;    WHILE i &lt;= NEW.final DO&#10;        INSERT INTO raffles (set_id, number) VALUES (NEW.id, i);&#10;        SET i = i + 1;&#10;    END WHILE;&#10;END//&#10;DELIMITER ;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/database/create-database.mysql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/database/create-database.mysql" />
              <option name="originalContent" value="-- @dialect mariadb&#10;&#10;DROP DATABASE raffles IF EXISTS;&#10;CREATE DATABASE raffles;&#10;USE raffles;&#10;&#10;CREATE TABLE proyects (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    name VARCHAR(100) NOT NULL,&#10;    description TEXT,&#10;    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    isActive BOOLEAN DEFAULT true&#10;);&#10;&#10;CREATE TABLE rafflesSet (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    proyect_id INTEGER,&#10;    name VARCHAR(100) NOT NULL,&#10;    type VARCHAR(8) NOT NULL CHECK (type IN ('online', 'physical')),&#10;    init INTEGER NOT NULL,&#10;    final INTEGER NOT NULL,&#10;    unit_price INTEGER NOT NULL,&#10;    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    CONSTRAINT valid_numbers CHECK (init &lt; final),&#10;    CONSTRAINT unique_set UNIQUE (proyect_id, name),&#10;    FOREIGN KEY (proyect_id) REFERENCES proyects(id)&#10;);&#10;&#10;CREATE TABLE buyers (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    name VARCHAR(100) NOT NULL,&#10;    email VARCHAR(100) UNIQUE NOT NULL,&#10;    phone VARCHAR(20),&#10;    register_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#10;);&#10;&#10;CREATE TABLE raffles (&#10;    set_id INTEGER NOT NULL,&#10;    number INTEGER NOT NULL,&#10;    sell_date TIMESTAMP,&#10;    buyer_id INTEGER,&#10;    payment_method VARCHAR(50) CHECK (payment_method in ('CASH', 'CARD', 'TRANSFER', 'OTHER')),&#10;    state VARCHAR(20) DEFAULT 'available' CHECK (state IN ('available', 'sold', 'reserved')),&#10;    FOREIGN KEY (buyer_id) REFERENCES buyers(id),&#10;    FOREIGN KEY (set_id) REFERENCES rafflesSet(id),&#10;    PRIMARY KEY (set_id, number),&#10;    UNIQUE KEY unique_number (number)&#10;);" />
              <option name="updatedContent" value="DROP DATABASE IF EXISTS raffles;&#10;CREATE DATABASE raffles;&#10;USE raffles;&#10;&#10;CREATE TABLE proyects (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    name VARCHAR(100) NOT NULL,&#10;    description TEXT,&#10;    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    isActive BOOLEAN DEFAULT true&#10;);&#10;&#10;CREATE TABLE rafflesSet (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    proyect_id INTEGER,&#10;    name VARCHAR(100) NOT NULL,&#10;    type VARCHAR(8) NOT NULL CHECK (type IN ('online', 'physical')),&#10;    init INTEGER NOT NULL,&#10;    final INTEGER NOT NULL,&#10;    unit_price INTEGER NOT NULL,&#10;    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    CONSTRAINT valid_numbers CHECK (init &lt; final),&#10;    CONSTRAINT unique_set UNIQUE (proyect_id, name),&#10;    FOREIGN KEY (proyect_id) REFERENCES proyects(id)&#10;);&#10;&#10;CREATE TABLE buyers (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    name VARCHAR(100) NOT NULL,&#10;    email VARCHAR(100) UNIQUE NOT NULL,&#10;    phone VARCHAR(20),&#10;    register_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#10;);&#10;&#10;CREATE TABLE raffles (&#10;    set_id INTEGER NOT NULL,&#10;    number INTEGER NOT NULL,&#10;    sell_date TIMESTAMP,&#10;    buyer_id INTEGER,&#10;    payment_method VARCHAR(50) CHECK (payment_method in ('CASH', 'CARD', 'TRANSFER', 'OTHER')),&#10;    state VARCHAR(20) DEFAULT 'available' CHECK (state IN ('available', 'sold', 'reserved')),&#10;    FOREIGN KEY (buyer_id) REFERENCES buyers(id),&#10;    FOREIGN KEY (set_id) REFERENCES rafflesSet(id),&#10;    PRIMARY KEY (set_id, number),&#10;    UNIQUE KEY unique_number (number)&#10;);&#10;&#10;-- Trigger to generate raffle numbers when a new raffleSet is created&#10;DELIMITER //&#10;CREATE TRIGGER generate_raffles&#10;    AFTER INSERT ON rafflesSet&#10;    FOR EACH ROW&#10;BEGIN&#10;    DECLARE i INT DEFAULT NEW.init;&#10;    WHILE i &lt;= NEW.final DO&#10;        INSERT INTO raffles (set_id, number) VALUES (NEW.id, i);&#10;        SET i = i + 1;&#10;    END WHILE;&#10;END//&#10;DELIMITER ;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/database/test_database.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/database/test_database.py" />
              <option name="updatedContent" value="#!/usr/bin/env python3&#10;        print(&quot;❌ Some tests failed. Please check the database setup.&quot;)&#10;        sys.exit(1)&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    main()" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/main.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/main.py" />
              <option name="originalContent" value="from fastapi import FastAPI&#10;from fastapi.middleware.cors import CORSMiddleware&#10;from routes import buyer, project, raffleset, raffle, auth&#10;from typing import cast&#10;&#10;app = FastAPI()&#10;&#10;origins = [&#10;    &quot;http://localhost:3000&quot;,&#10;    &quot;http://localhost:8080&quot;,&#10;    &quot;http://127.0.0.1:3000&quot;,&#10;    &quot;http://127.0.0.1:8080&quot;,&#10;    &quot;*&quot;&#10;]&#10;&#10;app.add_middleware(&#10;    cast(type, CORSMiddleware),  # type: ignore&#10;    allow_origins=origins,&#10;    allow_credentials=True,&#10;    allow_methods=[&quot;*&quot;],&#10;    allow_headers=[&quot;*&quot;],&#10;)&#10;&#10;app.include_router(auth.router, prefix=&quot;/auth&quot;, tags=[&quot;Authentication&quot;])&#10;app.include_router(buyer.router, tags=[&quot;Buyers&quot;])&#10;app.include_router(project.router, tags=[&quot;Projects&quot;])&#10;app.include_router(raffleset.router, tags=[&quot;Raffle Sets&quot;])&#10;app.include_router(raffle.router, tags=[&quot;Raffles&quot;])&#10;" />
              <option name="updatedContent" value="from fastapi import FastAPI&#10;from fastapi.middleware.cors import CORSMiddleware&#10;from routes import buyer, project, raffleset, raffle, auth&#10;from typing import cast&#10;&#10;app = FastAPI()&#10;&#10;origins = [&#10;    &quot;http://localhost:3000&quot;,&#10;    &quot;http://localhost:8080&quot;,&#10;    &quot;http://127.0.0.1:3000&quot;,&#10;    &quot;http://127.0.0.1:8080&quot;,&#10;    &quot;*&quot;&#10;]&#10;&#10;app.add_middleware(&#10;    cast(type, CORSMiddleware),  # type: ignore&#10;    allow_origins=origins,&#10;    allow_credentials=True,&#10;    allow_methods=[&quot;*&quot;],&#10;    allow_headers=[&quot;*&quot;],&#10;)&#10;&#10;# Health check endpoint for Railway&#10;@app.get(&quot;/health&quot;)&#10;async def health_check():&#10;    return {&quot;status&quot;: &quot;healthy&quot;}&#10;&#10;app.include_router(auth.router, prefix=&quot;/auth&quot;, tags=[&quot;Authentication&quot;])&#10;app.include_router(buyer.router, tags=[&quot;Buyers&quot;])&#10;app.include_router(project.router, tags=[&quot;Projects&quot;])&#10;app.include_router(raffleset.router, tags=[&quot;Raffle Sets&quot;])&#10;app.include_router(raffle.router, tags=[&quot;Raffles&quot;])" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/railway.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/railway.toml" />
              <option name="updatedContent" value="[build]&#10;builder = &quot;nixpacks&quot;&#10;&#10;[deploy]&#10;startCommand = &quot;uvicorn main:app --host 0.0.0.0 --port $PORT&quot;&#10;healthcheckPath = &quot;/health&quot;&#10;healthcheckTimeout = 300&#10;&#10;[env]&#10;PYTHONPATH = &quot;/app:$PYTHONPATH&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/test_minimal.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/test_minimal.py" />
              <option name="updatedContent" value="#!/usr/bin/env python3&#10;&quot;&quot;&quot;&#10;Minimal test to verify the application works&#10;&quot;&quot;&quot;&#10;import os&#10;import sys&#10;sys.path.insert(0, '/home/gonzadev/Proyectos/python/raffles-manager')&#10;&#10;def test_minimal():&#10;    &quot;&quot;&quot;Minimal test to check if basic functionality works&quot;&quot;&quot;&#10;    try:&#10;        print(&quot; Starting minimal test...&quot;)&#10;        &#10;        # Test 1: Basic imports&#10;        print(&quot;1. Testing basic imports...&quot;)&#10;        import fastapi&#10;        import sqlalchemy&#10;        print(&quot;✅ Basic dependencies imported&quot;)&#10;        &#10;        # Test 2: Environment variables&#10;        print(&quot;2. Testing environment...&quot;)&#10;        if os.path.exists('.env'):&#10;            print(&quot;✅ .env file exists&quot;)&#10;        else:&#10;            print(&quot;❌ .env file missing&quot;)&#10;            &#10;        # Test 3: Try config import&#10;        print(&quot;3. Testing config import...&quot;)&#10;        try:&#10;            from core.config_loader import settings&#10;            print(f&quot;✅ Config loaded - DB: {settings.MARIADB_DATABASE}&quot;)&#10;        except Exception as e:&#10;            print(f&quot;❌ Config failed: {e}&quot;)&#10;            return False&#10;            &#10;        # Test 4: Try database connection&#10;        print(&quot;4. Testing database connection...&quot;)&#10;        try:&#10;            from database.connection import engine&#10;            print(&quot;✅ Database engine created&quot;)&#10;        except Exception as e:&#10;            print(f&quot;❌ Database failed: {e}&quot;)&#10;            return False&#10;            &#10;        print(&quot;✅ All basic tests passed!&quot;)&#10;        return True&#10;        &#10;    except Exception as e:&#10;        print(f&quot;❌ Test failed: {e}&quot;)&#10;        return False&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    success = test_minimal()&#10;    if success:&#10;        print(&quot;\n Ready to run full tests!&quot;)&#10;    else:&#10;        print(&quot;\n Fix the issues above before running tests&quot;)&#10;        sys.exit(1)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/test_simple.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/test_simple.py" />
              <option name="updatedContent" value="#!/usr/bin/env python3&#10;&quot;&quot;&quot;&#10;Simplified test file that bypasses import hanging issues&#10;&quot;&quot;&quot;&#10;import sys&#10;import os&#10;&#10;# Add the project root to Python path&#10;sys.path.insert(0, '/home/gonzadev/Proyectos/python/raffles-manager')&#10;&#10;def test_basic_imports():&#10;    &quot;&quot;&quot;Test basic imports work&quot;&quot;&quot;&#10;    try:&#10;        print(&quot;Testing config import...&quot;)&#10;        from core.config_loader import settings&#10;        print(&quot;✅ Config loaded successfully&quot;)&#10;        &#10;        print(&quot;Testing database import...&quot;)&#10;        from database.connection import Base&#10;        print(&quot;✅ Database connection imported&quot;)&#10;        &#10;        print(&quot;Testing models import...&quot;)&#10;        from models.buyer import Buyer&#10;        print(&quot;✅ Models imported&quot;)&#10;        &#10;        print(&quot;Testing FastAPI app...&quot;)&#10;        from fastapi import FastAPI&#10;        app = FastAPI()&#10;        print(&quot;✅ FastAPI app created&quot;)&#10;        &#10;        return True&#10;    except Exception as e:&#10;        print(f&quot;❌ Import failed: {e}&quot;)&#10;        return False&#10;&#10;def test_database_url():&#10;    &quot;&quot;&quot;Test database URL generation&quot;&quot;&quot;&#10;    try:&#10;        from core.config_loader import settings&#10;        db_url = str(settings.SQLALCHEMY_DATABASE_URI)&#10;        print(f&quot;Database URL: {db_url}&quot;)&#10;        return True&#10;    except Exception as e:&#10;        print(f&quot;❌ Database URL test failed: {e}&quot;)&#10;        return False&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    print(&quot; Running simplified tests...&quot;)&#10;    &#10;    if test_basic_imports():&#10;        print(&quot;\n Testing database URL...&quot;)&#10;        test_database_url()&#10;        print(&quot;\n✅ Basic tests completed successfully!&quot;)&#10;    else:&#10;        print(&quot;\n❌ Basic tests failed!&quot;)&#10;        sys.exit(1)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="/tmp/create-database-fixed.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="/tmp/create-database-fixed.sql" />
              <option name="updatedContent" value="CREATE SCHEMA IF NOT EXISTS raffles_schema;&#10;&#10;SET search_path TO raffles_schema, public;&#10;&#10;CREATE TABLE proyects (&#10;    id SERIAL PRIMARY KEY,&#10;    name VARCHAR(100) NOT NULL,&#10;    description TEXT,&#10;    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    isActive BOOL DEFAULT true&#10;);&#10;&#10;CREATE TABLE rafflesSet (&#10;    id SERIAL PRIMARY KEY,&#10;    proyect_id INTEGER REFERENCES proyects(id),&#10;    name VARCHAR(100) NOT NULL,&#10;    type VARCHAR(8) NOT NULL CHECK (type IN ('online', 'physical')),&#10;    init INTEGER NOT NULL,&#10;    final INTEGER NOT NULL,&#10;    unit_price INTEGER NOT NULL ,&#10;    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    CONSTRAINT valid_numbers CHECK (init &lt; final),&#10;    CONSTRAINT unique_set UNIQUE (proyect_id, name)&#10;);&#10;&#10;CREATE TABLE buyers (&#10;    id SERIAL PRIMARY KEY,&#10;    name VARCHAR(100) NOT NULL,&#10;    email VARCHAR(100) UNIQUE NOT NULL,&#10;    phone VARCHAR(20),&#10;    register_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#10;);&#10;&#10;CREATE TABLE raffles ( -- Units&#10;    set_id INTEGER NOT NULL REFERENCES rafflesSet(id),&#10;    number INTEGER NOT NULL,&#10;    sell_date TIMESTAMP,&#10;    buyer_id INTEGER,&#10;    payment_method VARCHAR(50) CHECK (payment_method in ('CASH', 'CARD', 'TRANSFER', 'OTHER')),&#10;    state VARCHAR(20) DEFAULT 'available' CHECK (state IN ('available', 'sold', 'reserved')),&#10;    FOREIGN KEY (buyer_id) REFERENCES buyers(id),&#10;    PRIMARY KEY (set_id, number)&#10;);&#10;&#10;CREATE OR REPLACE FUNCTION generate_raffles()&#10;RETURNS TRIGGER AS $$&#10;DECLARE&#10;    next_number INTEGER;&#10;    count_numbers INTEGER;&#10;BEGIN&#10;&#10;    SELECT COALESCE(MAX(number), 0) + 1 INTO next_number FROM raffles;&#10;&#10;    -- Calculate how many numbers we need to generate&#10;    count_numbers := NEW.final - NEW.init + 1;&#10;&#10;    -- Update the rafflesSet with the actual init and final values&#10;    UPDATE rafflesSet&#10;    SET init = next_number,&#10;        final = next_number + count_numbers - 1&#10;    WHERE id = NEW.id;&#10;&#10;    -- Insert the raffle numbers&#10;    INSERT INTO raffles (set_id, number)&#10;    SELECT NEW.id, generate_series(next_number, next_number + count_numbers - 1);&#10;&#10;    RETURN NEW;&#10;END;&#10;$$ LANGUAGE plpgsql;&#10;&#10;CREATE TRIGGER trig_generate_raffles&#10;AFTER INSERT ON rafflesSet&#10;FOR EACH ROW&#10;EXECUTE FUNCTION generate_raffles();" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>