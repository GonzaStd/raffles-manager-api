<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.env">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.env" />
              <option name="updatedContent" value="MARIADB_USERNAME=raffles-manager&#10;MARIADB_PASSWORD=raffles&#10;MARIADB_SERVER=localhost&#10;MARIADB_PORT=3306&#10;MARIADB_DATABASE=raffles_draw&#10;DOMAIN=localhost&#10;ENVIRONMENT=local&#10;BACKEND_CORS_ORIGINS=http://localhost,http://localhost:5173&#10;JWT_SECRET_KEY=twq...2s!" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/auth/services/auth_service.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/auth/services/auth_service.py" />
              <option name="originalContent" value="from typing import Annotated&#10;&#10;from jwt.exceptions import InvalidTokenError&#10;#from auth.models.token import TokenData&#10;#from auth.utils.auth_utils import verify_password&#10;from core.config_loader import settings&#10;from fastapi.security import OAuth2PasswordBearer&#10;from sqlalchemy.orm import Session&#10;from fastapi import Depends, HTTPException, status&#10;from datetime import datetime, timedelta, timezone&#10;import jwt&#10;from database.connection import get_db&#10;from models import Users&#10;#from user.services.user_service import get_user_by_email&#10;&#10;SECRET_KEY = settings.JWT_SECRET_KEY&#10;ALGORITHM = &quot;HS256&quot;&#10;&#10;oauth2_scheme = OAuth2PasswordBearer(tokenUrl=&quot;/api/auth/token&quot;)&#10;&#10;&#10;&quot;&quot;&quot;def authenticate_user(email: str, password: str, db:Session = Depends(get_db)):&#10;    user = get_user_by_email(db, email)&#10;    if not user:&#10;        return False&#10;    if not verify_password(password, user.password):&#10;        return False&#10;    return user&quot;&quot;&quot;&#10;&#10;&#10;def create_access_token(data: dict, expires_delta: timedelta | None = None):&#10;    to_encode = data.copy()&#10;    if expires_delta:&#10;        expire = datetime.now(timezone.utc) + expires_delta&#10;    else:&#10;        expire = datetime.now(timezone.utc) + timedelta(minutes=15)&#10;    to_encode.update({&quot;exp&quot;: expire})&#10;    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)&#10;    return encoded_jwt&#10;&#10;&#10;&quot;&quot;&quot;async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)], db:Session = Depends(get_db)):&#10;    credentials_exception = HTTPException(&#10;        status_code=status.HTTP_401_UNAUTHORIZED,&#10;        detail=&quot;Could not validate credentials&quot;,&#10;        headers={&quot;WWW-Authenticate&quot;: &quot;Bearer&quot;},&#10;    )&#10;    try:&#10;        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])&#10;        email = payload.get(&quot;sub&quot;)&#10;        if email is None:&#10;            raise credentials_exception&#10;        token_data = TokenData(email=email)&#10;    except InvalidTokenError:&#10;        raise credentials_exception&#10;    user = get_user_by_email(db, email=token_data.email)&#10;    if user is None:&#10;        raise credentials_exception&#10;    return user&quot;&quot;&quot;&#10;&#10;&#10;&quot;&quot;&quot;async def get_current_active_user(current_user: Users = Depends(get_current_user)):&#10;    return current_user&quot;&quot;&quot;" />
              <option name="updatedContent" value="from typing import Annotated&#10;&#10;from jwt.exceptions import InvalidTokenError&#10;#from auth.models.token import TokenData&#10;#from auth.utils.auth_utils import verify_password&#10;from core.config_loader import settings&#10;from fastapi.security import OAuth2PasswordBearer&#10;from sqlalchemy.orm import Session&#10;from fastapi import Depends, HTTPException, status&#10;from datetime import datetime, timedelta, timezone&#10;import jwt&#10;from database.connection import get_db&#10;from models import User  # Changed from Users to User&#10;#from user.services.user_service import get_user_by_email&#10;&#10;SECRET_KEY = settings.JWT_SECRET_KEY&#10;ALGORITHM = &quot;HS256&quot;&#10;&#10;oauth2_scheme = OAuth2PasswordBearer(tokenUrl=&quot;/api/auth/token&quot;)&#10;&#10;&#10;&quot;&quot;&quot;def authenticate_user(email: str, password: str, db:Session = Depends(get_db)):&#10;    user = get_user_by_email(db, email)&#10;    if not user:&#10;        return False&#10;    if not verify_password(password, user.password):&#10;        return False&#10;    return user&quot;&quot;&quot;&#10;&#10;&#10;def create_access_token(data: dict, expires_delta: timedelta | None = None):&#10;    to_encode = data.copy()&#10;    if expires_delta:&#10;        expire = datetime.now(timezone.utc) + expires_delta&#10;    else:&#10;        expire = datetime.now(timezone.utc) + timedelta(minutes=15)&#10;    to_encode.update({&quot;exp&quot;: expire})&#10;    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)&#10;    return encoded_jwt&#10;&#10;&#10;&quot;&quot;&quot;async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)], db:Session = Depends(get_db)):&#10;    credentials_exception = HTTPException(&#10;        status_code=status.HTTP_401_UNAUTHORIZED,&#10;        detail=&quot;Could not validate credentials&quot;,&#10;        headers={&quot;WWW-Authenticate&quot;: &quot;Bearer&quot;},&#10;    )&#10;    try:&#10;        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])&#10;        email = payload.get(&quot;sub&quot;)&#10;        if email is None:&#10;            raise credentials_exception&#10;        token_data = TokenData(email=email)&#10;    except InvalidTokenError:&#10;        raise credentials_exception&#10;    user = get_user_by_email(db, email=token_data.email)&#10;    if user is None:&#10;        raise credentials_exception&#10;    return user&quot;&quot;&quot;&#10;&#10;&#10;&quot;&quot;&quot;async def get_current_active_user(current_user: Users = Depends(get_current_user)):&#10;    return current_user&quot;&quot;&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/core/__init__.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/core/__init__.py" />
              <option name="originalContent" value="from sqlalchemy import create_engine&#10;from core.database import setup_mysql&#10;from core.config_loader import settings&#10;&#10;if True or setup_mysql():&#10;    sys_engine = create_engine(f&quot;mysql+pymysql://{settings.MARIADB_USERNAME}:{settings.MARIADB_PASSWORD}@{settings.MARIADB_SERVER}&quot;)&#10;" />
              <option name="updatedContent" value="from sqlalchemy import create_engine&#10;from core.database import setup_mysql&#10;from core.config_loader import settings&#10;&#10;# Remove immediate database setup that hangs during import&#10;# Only create the engine definition, don't execute setup&#10;def get_sys_engine():&#10;    if setup_mysql():&#10;        return create_engine(f&quot;mysql+pymysql://{settings.MARIADB_USERNAME}:{settings.MARIADB_PASSWORD}@{settings.MARIADB_SERVER}&quot;)&#10;    return None&#10;&#10;# Make sys_engine lazy-loaded&#10;sys_engine = None" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/core/config.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/core/config.py" />
              <option name="originalContent" value="from pydantic_settings import BaseSettings, SettingsConfigDict&#10;from typing import Annotated, Any, Literal&#10;&#10;from pydantic import (&#10;    AnyUrl,&#10;    BeforeValidator,&#10;    computed_field,&#10;    MariaDBDsn,&#10;    Field&#10;)&#10;&#10;from pydantic_core import MultiHostUrl&#10;&#10;&#10;def parse_cors(v: Any) -&gt; list[str] | str:&#10;    if isinstance(v, str) and not v.startswith(&quot;[&quot;):&#10;        return [i.strip() for i in v.split(&quot;,&quot;)]&#10;    elif isinstance(v, list | str):&#10;        return v&#10;    raise ValueError(v)&#10;&#10;&#10;class Settings(BaseSettings):&#10;    model_config = SettingsConfigDict(&#10;        env_file='.env',&#10;        env_file_encoding='utf-8',&#10;        extra=&quot;ignore&quot;,&#10;        env_ignore_empty = True,&#10;    )&#10;    DOMAIN: str = 'localhost'&#10;    ENVIRONMENT: Literal[&quot;local&quot;, &quot;staging&quot;, &quot;production&quot;] = &quot;local&quot;&#10;    JWT_SECRET_KEY: str&#10;&#10;    @computed_field&#10;    @property&#10;    def server_host(self) -&gt; str:&#10;        # Use HTTPS for anything other than local development&#10;        if self.ENVIRONMENT == &quot;local&quot;:&#10;            return f&quot;http://{self.DOMAIN}&quot;&#10;        return f&quot;https://{self.DOMAIN}&quot;&#10;&#10;    BACKEND_CORS_ORIGINS: Annotated[list[AnyUrl] | str, BeforeValidator(parse_cors)] = Field(default=lambda: [])&#10;&#10;    MARIADB_USERNAME: str&#10;    MARIADB_PASSWORD: str&#10;    MARIADB_SERVER: str&#10;    MARIADB_PORT: int&#10;    MARIADB_DATABASE: str&#10;&#10;    @computed_field  # type: ignore[misc]&#10;    @property&#10;    def SQLALCHEMY_DATABASE_URI(self) -&gt; MariaDBDsn | MultiHostUrl:&#10;        return MultiHostUrl.build(&#10;            scheme=&quot;mysql+pymysql&quot;,&#10;            username=self.MARIADB_USERNAME,&#10;            password=self.MARIADB_PASSWORD,&#10;            host=self.MARIADB_SERVER,&#10;            port=self.MARIADB_PORT,&#10;            path=self.MARIADB_DATABASE&#10;        )" />
              <option name="updatedContent" value="from pydantic_settings import BaseSettings, SettingsConfigDict&#10;from typing import Annotated, Any, Literal&#10;&#10;from pydantic import (&#10;    AnyUrl,&#10;    BeforeValidator,&#10;    computed_field,&#10;    Field&#10;)&#10;&#10;&#10;def parse_cors(v: Any) -&gt; list[str] | str:&#10;    if isinstance(v, str) and not v.startswith(&quot;[&quot;):&#10;        return [i.strip() for i in v.split(&quot;,&quot;)]&#10;    elif isinstance(v, list | str):&#10;        return v&#10;    raise ValueError(v)&#10;&#10;&#10;class Settings(BaseSettings):&#10;    model_config = SettingsConfigDict(&#10;        env_file='.env',&#10;        env_file_encoding='utf-8',&#10;        extra=&quot;ignore&quot;,&#10;        env_ignore_empty = True,&#10;    )&#10;    DOMAIN: str = 'localhost'&#10;    ENVIRONMENT: Literal[&quot;local&quot;, &quot;staging&quot;, &quot;production&quot;] = &quot;local&quot;&#10;    JWT_SECRET_KEY: str&#10;&#10;    @computed_field&#10;    @property&#10;    def server_host(self) -&gt; str:&#10;        # Use HTTPS for anything other than local development&#10;        if self.ENVIRONMENT == &quot;local&quot;:&#10;            return f&quot;http://{self.DOMAIN}&quot;&#10;        return f&quot;https://{self.DOMAIN}&quot;&#10;&#10;    BACKEND_CORS_ORIGINS: Annotated[list[AnyUrl] | str, BeforeValidator(parse_cors)] = Field(default=lambda: [])&#10;&#10;    MARIADB_USERNAME: str&#10;    MARIADB_PASSWORD: str&#10;    MARIADB_SERVER: str&#10;    MARIADB_PORT: int&#10;    MARIADB_DATABASE: str&#10;&#10;    @computed_field&#10;    @property&#10;    def SQLALCHEMY_DATABASE_URI(self) -&gt; str:&#10;        # Return simple string instead of complex MariaDBDsn to prevent validation hanging&#10;        return f&quot;mysql+pymysql://{self.MARIADB_USERNAME}:{self.MARIADB_PASSWORD}@{self.MARIADB_SERVER}:{self.MARIADB_PORT}/{self.MARIADB_DATABASE}&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/database/connection.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/database/connection.py" />
              <option name="originalContent" value="from sqlalchemy import create_engine&#10;from sqlalchemy.orm import sessionmaker, DeclarativeBase&#10;from core.config_loader import settings&#10;&#10;DATABASE_URL = str(settings.SQLALCHEMY_DATABASE_URI) #&quot;mysql+pymysql://raffles-manager:raffles@localhost/raffles_draw&quot;&#10;&#10;engine = create_engine(DATABASE_URL)&#10;SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)&#10;class Base(DeclarativeBase):&#10;    pass&#10;&#10;def get_db():&#10;    db = SessionLocal()&#10;    try:&#10;        yield db&#10;    finally:&#10;        db.close()" />
              <option name="updatedContent" value="from sqlalchemy import create_engine&#10;from sqlalchemy.orm import sessionmaker, DeclarativeBase&#10;from core.config_loader import settings&#10;&#10;# Create database URL but don't test connection during import&#10;DATABASE_URL = str(settings.SQLALCHEMY_DATABASE_URI)&#10;&#10;# Use pool settings to prevent hanging connections&#10;engine = create_engine(&#10;    DATABASE_URL,&#10;    pool_pre_ping=True,&#10;    pool_recycle=300,&#10;    connect_args={&quot;connect_timeout&quot;: 10}&#10;)&#10;SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)&#10;&#10;class Base(DeclarativeBase):&#10;    pass&#10;&#10;def get_db():&#10;    db = SessionLocal()&#10;    try:&#10;        yield db&#10;    finally:&#10;        db.close()" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/database/create-database-mysql.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/database/create-database-mysql.sql" />
              <option name="originalContent" value="-- MySQL Database Schema for Raffles Manager&#10;-- Mode: MySQL&#10;&#10;DROP DATABASE IF EXISTS raffles;&#10;CREATE DATABASE raffles;&#10;USE raffles;&#10;&#10;CREATE TABLE proyects (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    name VARCHAR(100) NOT NULL,&#10;    description TEXT,&#10;    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    isActive BOOLEAN DEFAULT true&#10;);&#10;&#10;CREATE TABLE rafflesSet (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    proyect_id INTEGER,&#10;    name VARCHAR(100) NOT NULL,&#10;    type VARCHAR(8) NOT NULL CHECK (type IN ('online', 'physical')),&#10;    init INTEGER NOT NULL,&#10;    final INTEGER NOT NULL,&#10;    unit_price INTEGER NOT NULL,&#10;    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    CONSTRAINT valid_numbers CHECK (init &lt; final),&#10;    CONSTRAINT unique_set UNIQUE (proyect_id, name),&#10;    FOREIGN KEY (proyect_id) REFERENCES proyects(id)&#10;);&#10;&#10;CREATE TABLE buyers (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    name VARCHAR(100) NOT NULL,&#10;    email VARCHAR(100) UNIQUE NOT NULL,&#10;    phone VARCHAR(20),&#10;    register_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#10;);&#10;&#10;CREATE TABLE raffles (&#10;    set_id INTEGER NOT NULL,&#10;    number INTEGER NOT NULL,&#10;    sell_date TIMESTAMP,&#10;    buyer_id INTEGER,&#10;    payment_method VARCHAR(50) CHECK (payment_method in ('CASH', 'CARD', 'TRANSFER', 'OTHER')),&#10;    state VARCHAR(20) DEFAULT 'available' CHECK (state IN ('available', 'sold', 'reserved')),&#10;    FOREIGN KEY (buyer_id) REFERENCES buyers(id),&#10;    FOREIGN KEY (set_id) REFERENCES rafflesSet(id),&#10;    PRIMARY KEY (set_id, number),&#10;    UNIQUE KEY unique_number (number)&#10;);&#10;&#10;-- Trigger to generate raffle numbers when a new raffleSet is created&#10;DELIMITER //&#10;CREATE TRIGGER generate_raffles&#10;    AFTER INSERT ON rafflesSet&#10;    FOR EACH ROW&#10;BEGIN&#10;    DECLARE i INT DEFAULT NEW.init;&#10;    WHILE i &lt;= NEW.final DO&#10;        INSERT INTO raffles (set_id, number) VALUES (NEW.id, i);&#10;        SET i = i + 1;&#10;    END WHILE;&#10;END//&#10;DELIMITER ;&#10;" />
              <option name="updatedContent" value="-- MySQL Database Schema for Raffles Manager&#10;-- Mode: MySQL&#10;&#10;DROP DATABASE IF EXISTS raffles;&#10;CREATE DATABASE raffles;&#10;USE raffles;&#10;&#10;CREATE TABLE proyects (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    name VARCHAR(100) NOT NULL,&#10;    description TEXT,&#10;    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    isActive BOOLEAN DEFAULT true&#10;);&#10;&#10;CREATE TABLE rafflesSet (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    proyect_id INTEGER,&#10;    name VARCHAR(100) NOT NULL,&#10;    type VARCHAR(8) NOT NULL CHECK (type IN ('online', 'physical')),&#10;    init INTEGER NOT NULL,&#10;    final INTEGER NOT NULL,&#10;    unit_price INTEGER NOT NULL,&#10;    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    CONSTRAINT valid_numbers CHECK (init &lt; final),&#10;    CONSTRAINT unique_set UNIQUE (proyect_id, name),&#10;    FOREIGN KEY (proyect_id) REFERENCES proyects(id)&#10;);&#10;&#10;CREATE TABLE buyers (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    name VARCHAR(100) NOT NULL,&#10;    email VARCHAR(100) UNIQUE NOT NULL,&#10;    phone VARCHAR(20),&#10;    register_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#10;);&#10;&#10;CREATE TABLE raffles (&#10;    set_id INTEGER NOT NULL,&#10;    number INTEGER NOT NULL,&#10;    sell_date TIMESTAMP,&#10;    buyer_id INTEGER,&#10;    payment_method VARCHAR(50) CHECK (payment_method in ('CASH', 'CARD', 'TRANSFER', 'OTHER')),&#10;    state VARCHAR(20) DEFAULT 'available' CHECK (state IN ('available', 'sold', 'reserved')),&#10;    FOREIGN KEY (buyer_id) REFERENCES buyers(id),&#10;    FOREIGN KEY (set_id) REFERENCES rafflesSet(id),&#10;    PRIMARY KEY (set_id, number),&#10;    UNIQUE KEY unique_number (number)&#10;);&#10;&#10;DELIMITER //&#10;CREATE TRIGGER generate_raffles&#10;    AFTER INSERT ON rafflesSet&#10;    FOR EACH ROW&#10;BEGIN&#10;    DECLARE i INT DEFAULT NEW.init;&#10;    WHILE i &lt;= NEW.final DO&#10;        INSERT INTO raffles (set_id, number) VALUES (NEW.id, i);&#10;        SET i = i + 1;&#10;    END WHILE;&#10;END//&#10;DELIMITER ;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/database/create-database.mysql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/database/create-database.mysql" />
              <option name="originalContent" value="-- @dialect mariadb&#10;&#10;DROP DATABASE raffles IF EXISTS;&#10;CREATE DATABASE raffles;&#10;USE raffles;&#10;&#10;CREATE TABLE proyects (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    name VARCHAR(100) NOT NULL,&#10;    description TEXT,&#10;    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    isActive BOOLEAN DEFAULT true&#10;);&#10;&#10;CREATE TABLE rafflesSet (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    proyect_id INTEGER,&#10;    name VARCHAR(100) NOT NULL,&#10;    type VARCHAR(8) NOT NULL CHECK (type IN ('online', 'physical')),&#10;    init INTEGER NOT NULL,&#10;    final INTEGER NOT NULL,&#10;    unit_price INTEGER NOT NULL,&#10;    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    CONSTRAINT valid_numbers CHECK (init &lt; final),&#10;    CONSTRAINT unique_set UNIQUE (proyect_id, name),&#10;    FOREIGN KEY (proyect_id) REFERENCES proyects(id)&#10;);&#10;&#10;CREATE TABLE buyers (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    name VARCHAR(100) NOT NULL,&#10;    email VARCHAR(100) UNIQUE NOT NULL,&#10;    phone VARCHAR(20),&#10;    register_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#10;);&#10;&#10;CREATE TABLE raffles (&#10;    set_id INTEGER NOT NULL,&#10;    number INTEGER NOT NULL,&#10;    sell_date TIMESTAMP,&#10;    buyer_id INTEGER,&#10;    payment_method VARCHAR(50) CHECK (payment_method in ('CASH', 'CARD', 'TRANSFER', 'OTHER')),&#10;    state VARCHAR(20) DEFAULT 'available' CHECK (state IN ('available', 'sold', 'reserved')),&#10;    FOREIGN KEY (buyer_id) REFERENCES buyers(id),&#10;    FOREIGN KEY (set_id) REFERENCES rafflesSet(id),&#10;    PRIMARY KEY (set_id, number),&#10;    UNIQUE KEY unique_number (number)&#10;);" />
              <option name="updatedContent" value="DROP DATABASE IF EXISTS raffles;&#10;CREATE DATABASE raffles;&#10;USE raffles;&#10;&#10;CREATE TABLE proyects (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    name VARCHAR(100) NOT NULL,&#10;    description TEXT,&#10;    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    isActive BOOLEAN DEFAULT true&#10;);&#10;&#10;CREATE TABLE rafflesSet (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    proyect_id INTEGER,&#10;    name VARCHAR(100) NOT NULL,&#10;    type VARCHAR(8) NOT NULL CHECK (type IN ('online', 'physical')),&#10;    init INTEGER NOT NULL,&#10;    final INTEGER NOT NULL,&#10;    unit_price INTEGER NOT NULL,&#10;    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    CONSTRAINT valid_numbers CHECK (init &lt; final),&#10;    CONSTRAINT unique_set UNIQUE (proyect_id, name),&#10;    FOREIGN KEY (proyect_id) REFERENCES proyects(id)&#10;);&#10;&#10;CREATE TABLE buyers (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    name VARCHAR(100) NOT NULL,&#10;    email VARCHAR(100) UNIQUE NOT NULL,&#10;    phone VARCHAR(20),&#10;    register_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#10;);&#10;&#10;CREATE TABLE raffles (&#10;    set_id INTEGER NOT NULL,&#10;    number INTEGER NOT NULL,&#10;    sell_date TIMESTAMP,&#10;    buyer_id INTEGER,&#10;    payment_method VARCHAR(50) CHECK (payment_method in ('CASH', 'CARD', 'TRANSFER', 'OTHER')),&#10;    state VARCHAR(20) DEFAULT 'available' CHECK (state IN ('available', 'sold', 'reserved')),&#10;    FOREIGN KEY (buyer_id) REFERENCES buyers(id),&#10;    FOREIGN KEY (set_id) REFERENCES rafflesSet(id),&#10;    PRIMARY KEY (set_id, number),&#10;    UNIQUE KEY unique_number (number)&#10;);&#10;&#10;-- Trigger to generate raffle numbers when a new raffleSet is created&#10;DELIMITER //&#10;CREATE TRIGGER generate_raffles&#10;    AFTER INSERT ON rafflesSet&#10;    FOR EACH ROW&#10;BEGIN&#10;    DECLARE i INT DEFAULT NEW.init;&#10;    WHILE i &lt;= NEW.final DO&#10;        INSERT INTO raffles (set_id, number) VALUES (NEW.id, i);&#10;        SET i = i + 1;&#10;    END WHILE;&#10;END//&#10;DELIMITER ;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/database/create.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/database/create.py" />
              <option name="originalContent" value="from sqlalchemy import text&#10;from core import sys_engine&#10;from pathlib import Path&#10;structure_path = Path(__file__).resolve().parent / &quot;structure.sql&quot;&#10;&#10;def db_exists(db: str):&#10;    with sys_engine.connect() as conn:&#10;        result = conn.execute(text(&quot;SHOW DATABASES&quot;))&#10;        databases = [row[0] for row in result]&#10;        return db in databases&#10;&#10;&#10;def create_database():&#10;    if not db_exists(&quot;raffles_draw&quot;):&#10;        with open(structure_path, 'r') as file:&#10;            sql_commands = file.read()&#10;&#10;        commands = [command.strip() for command in sql_commands.split(&quot;;&quot;) if command.strip()]&#10;        connection = sys_engine.connect()&#10;&#10;        for command in commands:&#10;            try:&#10;                connection.execute(text(command))&#10;                connection.commit()&#10;            except Exception as e:&#10;                print(f&quot;There was a problem creating \&quot;raffles_draw\&quot; database on mysql:\n{e}&quot;)&#10;    return True" />
              <option name="updatedContent" value="from sqlalchemy import text, create_engine&#10;from core.config_loader import settings&#10;from pathlib import Path&#10;&#10;structure_path = Path(__file__).resolve().parent / &quot;structure.sql&quot;&#10;&#10;def get_sys_engine():&#10;    &quot;&quot;&quot;Create system engine for database operations&quot;&quot;&quot;&#10;    return create_engine(f&quot;mysql+pymysql://{settings.MARIADB_USERNAME}:{settings.MARIADB_PASSWORD}@{settings.MARIADB_SERVER}&quot;)&#10;&#10;def db_exists(db: str):&#10;    sys_engine = get_sys_engine()&#10;    with sys_engine.connect() as conn:&#10;        result = conn.execute(text(&quot;SHOW DATABASES&quot;))&#10;        databases = [row[0] for row in result]&#10;        return db in databases&#10;&#10;&#10;def create_database():&#10;    if not db_exists(&quot;raffles_draw&quot;):&#10;        with open(structure_path, 'r') as file:&#10;            sql_commands = file.read()&#10;&#10;        commands = [command.strip() for command in sql_commands.split(&quot;;&quot;) if command.strip()]&#10;        sys_engine = get_sys_engine()&#10;        connection = sys_engine.connect()&#10;&#10;        for command in commands:&#10;            try:&#10;                connection.execute(text(command))&#10;                connection.commit()&#10;            except Exception as e:&#10;                print(f&quot;There was a problem creating \&quot;raffles_draw\&quot; database on mysql:\n{e}&quot;)&#10;        connection.close()&#10;    return True" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/database/structure.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/database/structure.sql" />
              <option name="originalContent" value="CREATE DATABASE IF NOT EXISTS raffles_draw;&#10;USE raffles_draw;&#10;&#10;CREATE TABLE IF NOT EXISTS users (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    username VARCHAR(32) NOT NULL UNIQUE,&#10;    email VARCHAR(64) NOT NULL UNIQUE,&#10;    password_hash TEXT NOT NULL,&#10;    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    is_active BOOLEAN NOT NULL DEFAULT TRUE,&#10;    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP&#10;);&#10;&#10;CREATE TABLE IF NOT EXISTS projects (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    user_id INT NOT NULL,&#10;    name VARCHAR(60) NOT NULL UNIQUE,&#10;    description TEXT,&#10;    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    is_active BOOLEAN DEFAULT TRUE,&#10;    FOREIGN KEY (user_id) REFERENCES users(id)&#10;);&#10;&#10;CREATE TABLE IF NOT EXISTS raffle_sets (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    project_id INT NOT NULL,&#10;    name VARCHAR(60) NOT NULL,&#10;    type VARCHAR(8) NOT NULL CHECK (type IN ('online', 'physical')),&#10;    init INT NOT NULL,&#10;    final INT NOT NULL,&#10;    unit_price INT NOT NULL,&#10;    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    CONSTRAINT valid_numbers CHECK (init &lt;= final),&#10;    CONSTRAINT unique_set UNIQUE (project_id, name),&#10;    FOREIGN KEY (project_id) REFERENCES projects(id)&#10;);&#10;&#10;CREATE TABLE IF NOT EXISTS buyers (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    name VARCHAR(60) NOT NULL,&#10;    phone VARCHAR(20) NOT NULL,&#10;    email VARCHAR(64),&#10;    register_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    CONSTRAINT unique_name_phone UNIQUE (name, phone)&#10;);&#10;&#10;CREATE TABLE IF NOT EXISTS raffles (&#10;    set_id INT NOT NULL,&#10;    number INT AUTO_INCREMENT PRIMARY KEY,&#10;    buyer_id INT,&#10;    sell_date TIMESTAMP,&#10;    payment_method VARCHAR(8) CHECK (payment_method in ('cash', 'card', 'transfer')),&#10;    state VARCHAR(9) DEFAULT 'available' CHECK (state IN ('available', 'sold', 'reserved')),&#10;    FOREIGN KEY (buyer_id) REFERENCES buyers(id),&#10;    FOREIGN KEY (set_id) REFERENCES raffle_sets(id)&#10;);&#10;" />
              <option name="updatedContent" value="CREATE DATABASE IF NOT EXISTS raffles_draw;&#10;USE raffles_draw;&#10;&#10;CREATE TABLE IF NOT EXISTS users (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    username VARCHAR(32) NOT NULL UNIQUE,&#10;    email VARCHAR(64) NOT NULL UNIQUE,&#10;    password_hash TEXT NOT NULL,&#10;    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    is_active BOOLEAN NOT NULL DEFAULT TRUE,&#10;    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP&#10;);&#10;&#10;CREATE TABLE IF NOT EXISTS projects (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    user_id INT NOT NULL,&#10;    name VARCHAR(60) NOT NULL UNIQUE,&#10;    description TEXT,&#10;    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    is_active BOOLEAN DEFAULT TRUE,&#10;    FOREIGN KEY (user_id) REFERENCES users(id)&#10;);&#10;&#10;CREATE TABLE IF NOT EXISTS raffle_sets (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    project_id INT NOT NULL,&#10;    name VARCHAR(60) NOT NULL,&#10;    type VARCHAR(8) NOT NULL CHECK (type IN ('online', 'physical')),&#10;    init INT NOT NULL,&#10;    final INT NOT NULL,&#10;    unit_price INT NOT NULL,&#10;    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    CONSTRAINT valid_numbers CHECK (init &lt;= final),&#10;    CONSTRAINT unique_set UNIQUE (project_id, name),&#10;    FOREIGN KEY (project_id) REFERENCES projects(id)&#10;);&#10;&#10;CREATE TABLE IF NOT EXISTS buyers (&#10;    id INT AUTO_INCREMENT PRIMARY KEY,&#10;    name VARCHAR(60) NOT NULL,&#10;    phone VARCHAR(20) NOT NULL,&#10;    email VARCHAR(64),&#10;    register_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    CONSTRAINT unique_name_phone UNIQUE (name, phone)&#10;);&#10;&#10;CREATE TABLE IF NOT EXISTS raffles (&#10;    number INT PRIMARY KEY,&#10;    set_id INT NOT NULL,&#10;    buyer_id INT,&#10;    sell_date TIMESTAMP,&#10;    payment_method VARCHAR(8) CHECK (payment_method in ('cash', 'card', 'transfer')),&#10;    state VARCHAR(9) DEFAULT 'available' CHECK (state IN ('available', 'sold', 'reserved')),&#10;    FOREIGN KEY (buyer_id) REFERENCES buyers(id),&#10;    FOREIGN KEY (set_id) REFERENCES raffle_sets(id)&#10;);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/database/test_database.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/database/test_database.py" />
              <option name="updatedContent" value="#!/usr/bin/env python3&#10;        print(&quot;❌ Some tests failed. Please check the database setup.&quot;)&#10;        sys.exit(1)&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    main()" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/models/__init__.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/models/__init__.py" />
              <option name="originalContent" value="from .project import Project&#10;from .raffle import Raffle&#10;from .raffleset import RaffleSet&#10;from .buyer import Buyer&#10;from .users import Users&#10;&#10;__all__ = [&quot;Project&quot;, &quot;RaffleSet&quot;, &quot;Raffle&quot;, &quot;Buyer&quot;, &quot;Users&quot;]" />
              <option name="updatedContent" value="from .project import Project&#10;from .raffle import Raffle&#10;from .raffleset import RaffleSet&#10;from .buyer import Buyer&#10;from .users import User&#10;&#10;__all__ = [&quot;Project&quot;, &quot;RaffleSet&quot;, &quot;Raffle&quot;, &quot;Buyer&quot;, &quot;User&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/models/buyer.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/models/buyer.py" />
              <option name="originalContent" value="from sqlalchemy import Column, Integer, String, TIMESTAMP, UniqueConstraint&#10;from sqlalchemy.orm import relationship&#10;from database.connection import Base&#10;&#10;&#10;class Buyer(Base):&#10;    __tablename__ = &quot;buyers&quot;&#10;&#10;    id = Column(Integer, primary_key=True)&#10;    name = Column(String(60), nullable=False)&#10;    phone = Column(String(20), nullable=False)&#10;    email = Column(String(64))&#10;    register_date = Column(TIMESTAMP, server_default=&quot;CURRENT_TIMESTAMP&quot;)&#10;&#10;    __table_args__ = (&#10;        UniqueConstraint('name', 'phone', name='unique_name_phone'),&#10;    )&#10;&#10;    raffles = relationship(&quot;Raffle&quot;, back_populates=&quot;buyer&quot;)&#10;" />
              <option name="updatedContent" value="from sqlalchemy import Column, Integer, String, TIMESTAMP, UniqueConstraint, text&#10;from sqlalchemy.orm import relationship&#10;from database.connection import Base&#10;&#10;&#10;class Buyer(Base):&#10;    __tablename__ = &quot;buyers&quot;&#10;&#10;    id = Column(Integer, primary_key=True)&#10;    name = Column(String(60), nullable=False)&#10;    phone = Column(String(20), nullable=False)&#10;    email = Column(String(64))&#10;    register_date = Column(TIMESTAMP, server_default=text(&quot;CURRENT_TIMESTAMP&quot;))&#10;&#10;    __table_args__ = (&#10;        UniqueConstraint('name', 'phone', name='unique_name_phone'),&#10;    )&#10;&#10;    raffles = relationship(&quot;Raffle&quot;, back_populates=&quot;buyer&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/models/project.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/models/project.py" />
              <option name="originalContent" value="from sqlalchemy import Column, Integer, String, Text, Boolean, TIMESTAMP, ForeignKey&#10;from sqlalchemy.orm import relationship&#10;from database.connection import Base&#10;&#10;&#10;class Project(Base):&#10;    __tablename__ = &quot;projects&quot;&#10;    id = Column(Integer, primary_key=True, index=True)&#10;    user_id = Column(Integer, ForeignKey(&quot;users.id&quot;), nullable=False)&#10;    name = Column(String(60), nullable=False, unique=True)&#10;    description = Column(Text)&#10;    creation_date = Column(TIMESTAMP, server_default=&quot;CURRENT_TIMESTAMP&quot;)&#10;    is_active = Column(Boolean, default=True)&#10;&#10;    raffle_sets = relationship(&quot;RaffleSet&quot;, back_populates=&quot;project&quot;)&#10;    user = relationship(&quot;User&quot;, back_populates=&quot;projects&quot;)&#10;" />
              <option name="updatedContent" value="from sqlalchemy import Column, Integer, String, Text, Boolean, TIMESTAMP, ForeignKey, text&#10;from sqlalchemy.orm import relationship&#10;from database.connection import Base&#10;&#10;&#10;class Project(Base):&#10;    __tablename__ = &quot;projects&quot;&#10;    id = Column(Integer, primary_key=True, index=True)&#10;    user_id = Column(Integer, ForeignKey(&quot;users.id&quot;), nullable=False)&#10;    name = Column(String(60), nullable=False, unique=True)&#10;    description = Column(Text)&#10;    creation_date = Column(TIMESTAMP, server_default=text(&quot;CURRENT_TIMESTAMP&quot;))&#10;    is_active = Column(Boolean, default=True)&#10;&#10;    raffle_sets = relationship(&quot;RaffleSet&quot;, back_populates=&quot;project&quot;)&#10;    user = relationship(&quot;User&quot;, back_populates=&quot;projects&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/models/raffle.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/models/raffle.py" />
              <option name="originalContent" value="from sqlalchemy import Column, Integer, String, ForeignKey, TIMESTAMP&#10;from sqlalchemy.orm import relationship&#10;from database import Base&#10;&#10;&#10;class Raffle(Base):&#10;    __tablename__ = &quot;raffles&quot;&#10;    number = Column(Integer, primary_key=True)&#10;    set_id = Column(Integer, ForeignKey(&quot;raffle_sets.id&quot;), nullable=False)&#10;    buyer_id = Column(Integer, ForeignKey(&quot;buyers.id&quot;))&#10;    sell_date = Column(TIMESTAMP)&#10;    payment_method = Column(String(8))&#10;    state = Column(String(9), default=&quot;available&quot;)&#10;&#10;    raffle_set = relationship(&quot;RaffleSet&quot;, back_populates=&quot;raffles&quot;)&#10;    buyer = relationship(&quot;Buyer&quot;, back_populates=&quot;raffles&quot;)&#10;" />
              <option name="updatedContent" value="from sqlalchemy import Column, Integer, String, ForeignKey, TIMESTAMP&#10;from sqlalchemy.orm import relationship&#10;from database.connection import Base&#10;&#10;&#10;class Raffle(Base):&#10;    __tablename__ = &quot;raffles&quot;&#10;    number = Column(Integer, primary_key=True)&#10;    set_id = Column(Integer, ForeignKey(&quot;raffle_sets.id&quot;), nullable=False)&#10;    buyer_id = Column(Integer, ForeignKey(&quot;buyers.id&quot;))&#10;    sell_date = Column(TIMESTAMP)&#10;    payment_method = Column(String(8))&#10;    state = Column(String(9), default=&quot;available&quot;)&#10;&#10;    raffle_set = relationship(&quot;RaffleSet&quot;, back_populates=&quot;raffles&quot;)&#10;    buyer = relationship(&quot;Buyer&quot;, back_populates=&quot;raffles&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/models/raffleset.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/models/raffleset.py" />
              <option name="originalContent" value="from sqlalchemy import Column, Integer, String, TIMESTAMP, ForeignKey, CheckConstraint&#10;from sqlalchemy.orm import relationship&#10;from database.connection import Base&#10;&#10;&#10;class RaffleSet(Base):&#10;    __tablename__ = &quot;raffle_sets&quot;&#10;    id = Column(Integer, primary_key=True, index=True)&#10;    project_id = Column(Integer, ForeignKey(&quot;projects.id&quot;), nullable=False)&#10;    name = Column(String(60), nullable=False)&#10;    type = Column(String(8), nullable=False)&#10;    init = Column(Integer, nullable=False)&#10;    final = Column(Integer, nullable=False)&#10;    unit_price = Column(Integer, nullable=False)&#10;    creation_date = Column(TIMESTAMP, server_default=&quot;CURRENT_TIMESTAMP&quot;)&#10;&#10;    __table_args__ = (&#10;        CheckConstraint(&quot;init &lt; final&quot;, name=&quot;valid_numbers&quot;),&#10;    )&#10;&#10;    project = relationship(&quot;Project&quot;, back_populates=&quot;raffle_sets&quot;)&#10;    raffles = relationship(&quot;Raffle&quot;, back_populates=&quot;raffle_set&quot;)" />
              <option name="updatedContent" value="from sqlalchemy import Column, Integer, String, TIMESTAMP, ForeignKey, CheckConstraint, text&#10;from sqlalchemy.orm import relationship&#10;from database.connection import Base&#10;&#10;&#10;class RaffleSet(Base):&#10;    __tablename__ = &quot;raffle_sets&quot;&#10;    id = Column(Integer, primary_key=True, index=True)&#10;    project_id = Column(Integer, ForeignKey(&quot;projects.id&quot;), nullable=False)&#10;    name = Column(String(60), nullable=False)&#10;    type = Column(String(8), nullable=False)&#10;    init = Column(Integer, nullable=False)&#10;    final = Column(Integer, nullable=False)&#10;    unit_price = Column(Integer, nullable=False)&#10;    creation_date = Column(TIMESTAMP, server_default=text(&quot;CURRENT_TIMESTAMP&quot;))&#10;&#10;    __table_args__ = (&#10;        CheckConstraint(&quot;init &lt; final&quot;, name=&quot;valid_numbers&quot;),&#10;    )&#10;&#10;    project = relationship(&quot;Project&quot;, back_populates=&quot;raffle_sets&quot;)&#10;    raffles = relationship(&quot;Raffle&quot;, back_populates=&quot;raffle_set&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/models/users.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/models/users.py" />
              <option name="originalContent" value="from sqlalchemy.orm import Mapped, mapped_column, relationship&#10;from sqlalchemy import Integer, String, Boolean, DateTime, text&#10;from database.connection import Base&#10;from datetime import datetime, timezone&#10;&#10;&#10;class User(Base):&#10;    __tablename__ = 'users'&#10;&#10;    id: Mapped[int] = mapped_column(Integer, primary_key=True)&#10;    username: Mapped[str] = mapped_column(String(32), unique=True, nullable=False)&#10;    email: Mapped[str] = mapped_column(String(64), unique=True, nullable=False)&#10;    password: Mapped[str] = mapped_column(String(128), nullable=False)&#10;    is_active: Mapped[bool] = mapped_column(Boolean, default=True)&#10;    created_at: Mapped[DateTime] = mapped_column(DateTime, server_default=text(&quot;CURRENT_TIMESTAMP&quot;), nullable=False)&#10;    updated_at: Mapped[DateTime] = mapped_column(DateTime, server_default=text(&quot;CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP&quot;))&#10;&#10;    projects = relationship(&quot;Project&quot;, back_populates=&quot;user&quot;)&#10;" />
              <option name="updatedContent" value="from sqlalchemy.orm import Mapped, mapped_column, relationship&#10;from sqlalchemy import Integer, String, Boolean, DateTime, text&#10;from database.connection import Base&#10;from datetime import datetime, timezone&#10;&#10;&#10;class User(Base):&#10;    __tablename__ = 'users'&#10;&#10;    id: Mapped[int] = mapped_column(Integer, primary_key=True)&#10;    username: Mapped[str] = mapped_column(String(32), unique=True, nullable=False)&#10;    email: Mapped[str] = mapped_column(String(64), unique=True, nullable=False)&#10;    password_hash: Mapped[str] = mapped_column(String(128), nullable=False)  # Fixed to match SQL&#10;    is_active: Mapped[bool] = mapped_column(Boolean, default=True)&#10;    creation_date: Mapped[DateTime] = mapped_column(DateTime, server_default=text(&quot;CURRENT_TIMESTAMP&quot;), nullable=False)  # Fixed field name&#10;    updated_at: Mapped[DateTime] = mapped_column(DateTime, server_default=text(&quot;CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP&quot;))&#10;&#10;    projects = relationship(&quot;Project&quot;, back_populates=&quot;user&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/schemas/buyer.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/schemas/buyer.py" />
              <option name="originalContent" value="from pydantic import BaseModel, Field, model_validator, EmailStr&#10;from typing import Optional&#10;&#10;class BuyerCreate(BaseModel):&#10;    name: str = Field(..., max_length=60)&#10;    phone: str = Field(..., max_length=20, pattern=r'^\+?\s?\d[\d\s]{5,17}$')&#10;    email: Optional[EmailStr] = Field(max_length=64)&#10;&#10;class BuyerDelete(BaseModel):&#10;    id: Optional[int] = None&#10;    name: Optional[str] = None&#10;    phone: Optional[str] = Field(max_length=20, pattern=r'^\+?\s?\d[\d\s]{5,17}$')&#10;&#10;    @model_validator(mode=&quot;after&quot;)&#10;    def check_valid_fields(self):&#10;        id, name, phone = (self.id, self.name, self.phone)&#10;        if id is None and (not name or not phone):&#10;            raise ValueError(&quot;You must send 'id' or the 'name' and 'phone' pair.&quot;)&#10;        return self&#10;&#10;class BuyerUpdate(BaseModel):&#10;    id: int&#10;    name: Optional[str] = Field(None, max_length=60)&#10;    phone: Optional[str] = Field(None, max_length=20, pattern=r'^\+?\s?\d[\d\s]{5,17}$')&#10;    email: Optional[EmailStr] = Field(None, max_length=64)&#10;&#10;    @model_validator(mode=&quot;after&quot;)&#10;    def check_valid_fields(self):&#10;        id, name, phone, email = (self.id, self.name, self.phone, self.email)&#10;        if id:&#10;            if name is None and phone is None and email is None:&#10;                raise ValueError(&quot;You must modify/update at least one value.&quot;)&#10;        else:&#10;            raise ValueError(&quot;Buyer id is required.&quot;)&#10;        return self" />
              <option name="updatedContent" value="from pydantic import BaseModel, Field, model_validator, EmailStr&#10;from typing import Optional&#10;&#10;class BuyerCreate(BaseModel):&#10;    name: str = Field(..., max_length=60)&#10;    phone: str = Field(..., max_length=20, pattern=r'^\+?\s?\d[\d\s]{5,17}$')&#10;    email: Optional[EmailStr] = Field(max_length=64)&#10;&#10;class BuyerDelete(BaseModel):&#10;    id: Optional[int] = None&#10;    name: Optional[str] = None&#10;    phone: Optional[str] = Field(None, max_length=20, pattern=r'^\+?\s?\d[\d\s]{5,17}$')&#10;&#10;    @model_validator(mode=&quot;after&quot;)&#10;    def check_valid_fields(self):&#10;        id, name, phone = (self.id, self.name, self.phone)&#10;        if id is None and (not name or not phone):&#10;            raise ValueError(&quot;You must send 'id' or the 'name' and 'phone' pair.&quot;)&#10;        return self&#10;&#10;class BuyerUpdate(BaseModel):&#10;    id: int&#10;    name: Optional[str] = Field(None, max_length=60)&#10;    phone: Optional[str] = Field(None, max_length=20, pattern=r'^\+?\s?\d[\d\s]{5,17}$')&#10;    email: Optional[EmailStr] = Field(None, max_length=64)&#10;&#10;    @model_validator(mode=&quot;after&quot;)&#10;    def check_valid_fields(self):&#10;        id, name, phone, email = (self.id, self.name, self.phone, self.email)&#10;        if id:&#10;            if name is None and phone is None and email is None:&#10;                raise ValueError(&quot;You must modify/update at least one value.&quot;)&#10;        else:&#10;            raise ValueError(&quot;Buyer id is required.&quot;)&#10;        return self" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/schemas/raffleset.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/schemas/raffleset.py" />
              <option name="originalContent" value="from pydantic import BaseModel, Field, model_validator&#10;from typing import Literal, Optional&#10;&#10;&#10;class RaffleSetCreate(BaseModel):&#10;    project_id: int&#10;    name: str = Field(..., max_length=60)&#10;    type: Literal[&quot;online&quot;, &quot;physical&quot;]&#10;    requested_count: int = Field(..., gt=0) # Not in database, used for raffles creation&#10;    unit_price: int = Field(..., gt=0)&#10;&#10;class RaffleSetOut(BaseModel):&#10;    id: int&#10;    name: str&#10;    init: int&#10;    final: int&#10;    unit_price: int&#10;&#10;    class Config:&#10;        from_attributes = True&#10;&#10;class RaffleSetUpdate(BaseModel):&#10;    id: int&#10;    name: Optional[str] = Field(..., max_length=60)&#10;    type: Optional[Literal[&quot;online&quot;, &quot;physical&quot;]] = Field(...)&#10;    unit_price: Optional[int] = Field(..., gt=0)&#10;&#10;    class Config:&#10;        from_attributes = True&#10;&#10;    @model_validator(mode=&quot;after&quot;)&#10;    def check_valid_fields(self):&#10;        id, name, type, unit_price = (self.id, self.name, self.type, self.unit_price)&#10;        if id:&#10;            if name is None and type is None and unit_price is None:&#10;                raise ValueError(&quot;You must modify/update at least one value.&quot;)&#10;        else:&#10;            raise ValueError(&quot;Set id is required.&quot;)&#10;        return self" />
              <option name="updatedContent" value="from pydantic import BaseModel, Field, model_validator, ConfigDict&#10;from typing import Literal, Optional&#10;&#10;&#10;class RaffleSetCreate(BaseModel):&#10;    project_id: int&#10;    name: str = Field(..., max_length=60)&#10;    type: Literal[&quot;online&quot;, &quot;physical&quot;]&#10;    requested_count: int = Field(..., gt=0) # Not in database, used for raffles creation&#10;    unit_price: int = Field(..., gt=0)&#10;&#10;class RaffleSetOut(BaseModel):&#10;    model_config = ConfigDict(from_attributes=True)&#10;    &#10;    id: int&#10;    name: str&#10;    init: int&#10;    final: int&#10;    unit_price: int&#10;&#10;class RaffleSetUpdate(BaseModel):&#10;    model_config = ConfigDict(from_attributes=True)&#10;    &#10;    id: int&#10;    name: Optional[str] = Field(None, max_length=60)&#10;    type: Optional[Literal[&quot;online&quot;, &quot;physical&quot;]] = Field(None)&#10;    unit_price: Optional[int] = Field(None, gt=0)&#10;&#10;    @model_validator(mode=&quot;after&quot;)&#10;    def check_valid_fields(self):&#10;        id, name, type, unit_price = (self.id, self.name, self.type, self.unit_price)&#10;        if id:&#10;            if name is None and type is None and unit_price is None:&#10;                raise ValueError(&quot;You must modify/update at least one value.&quot;)&#10;        else:&#10;            raise ValueError(&quot;Set id is required.&quot;)&#10;        return self" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/test_minimal.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/test_minimal.py" />
              <option name="updatedContent" value="#!/usr/bin/env python3&#10;&quot;&quot;&quot;&#10;Minimal test to verify the application works&#10;&quot;&quot;&quot;&#10;import os&#10;import sys&#10;sys.path.insert(0, '/home/gonzadev/Proyectos/python/raffles-manager')&#10;&#10;def test_minimal():&#10;    &quot;&quot;&quot;Minimal test to check if basic functionality works&quot;&quot;&quot;&#10;    try:&#10;        print(&quot; Starting minimal test...&quot;)&#10;        &#10;        # Test 1: Basic imports&#10;        print(&quot;1. Testing basic imports...&quot;)&#10;        import fastapi&#10;        import sqlalchemy&#10;        print(&quot;✅ Basic dependencies imported&quot;)&#10;        &#10;        # Test 2: Environment variables&#10;        print(&quot;2. Testing environment...&quot;)&#10;        if os.path.exists('.env'):&#10;            print(&quot;✅ .env file exists&quot;)&#10;        else:&#10;            print(&quot;❌ .env file missing&quot;)&#10;            &#10;        # Test 3: Try config import&#10;        print(&quot;3. Testing config import...&quot;)&#10;        try:&#10;            from core.config_loader import settings&#10;            print(f&quot;✅ Config loaded - DB: {settings.MARIADB_DATABASE}&quot;)&#10;        except Exception as e:&#10;            print(f&quot;❌ Config failed: {e}&quot;)&#10;            return False&#10;            &#10;        # Test 4: Try database connection&#10;        print(&quot;4. Testing database connection...&quot;)&#10;        try:&#10;            from database.connection import engine&#10;            print(&quot;✅ Database engine created&quot;)&#10;        except Exception as e:&#10;            print(f&quot;❌ Database failed: {e}&quot;)&#10;            return False&#10;            &#10;        print(&quot;✅ All basic tests passed!&quot;)&#10;        return True&#10;        &#10;    except Exception as e:&#10;        print(f&quot;❌ Test failed: {e}&quot;)&#10;        return False&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    success = test_minimal()&#10;    if success:&#10;        print(&quot;\n Ready to run full tests!&quot;)&#10;    else:&#10;        print(&quot;\n Fix the issues above before running tests&quot;)&#10;        sys.exit(1)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/test_simple.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/test_simple.py" />
              <option name="updatedContent" value="#!/usr/bin/env python3&#10;&quot;&quot;&quot;&#10;Simplified test file that bypasses import hanging issues&#10;&quot;&quot;&quot;&#10;import sys&#10;import os&#10;&#10;# Add the project root to Python path&#10;sys.path.insert(0, '/home/gonzadev/Proyectos/python/raffles-manager')&#10;&#10;def test_basic_imports():&#10;    &quot;&quot;&quot;Test basic imports work&quot;&quot;&quot;&#10;    try:&#10;        print(&quot;Testing config import...&quot;)&#10;        from core.config_loader import settings&#10;        print(&quot;✅ Config loaded successfully&quot;)&#10;        &#10;        print(&quot;Testing database import...&quot;)&#10;        from database.connection import Base&#10;        print(&quot;✅ Database connection imported&quot;)&#10;        &#10;        print(&quot;Testing models import...&quot;)&#10;        from models.buyer import Buyer&#10;        print(&quot;✅ Models imported&quot;)&#10;        &#10;        print(&quot;Testing FastAPI app...&quot;)&#10;        from fastapi import FastAPI&#10;        app = FastAPI()&#10;        print(&quot;✅ FastAPI app created&quot;)&#10;        &#10;        return True&#10;    except Exception as e:&#10;        print(f&quot;❌ Import failed: {e}&quot;)&#10;        return False&#10;&#10;def test_database_url():&#10;    &quot;&quot;&quot;Test database URL generation&quot;&quot;&quot;&#10;    try:&#10;        from core.config_loader import settings&#10;        db_url = str(settings.SQLALCHEMY_DATABASE_URI)&#10;        print(f&quot;Database URL: {db_url}&quot;)&#10;        return True&#10;    except Exception as e:&#10;        print(f&quot;❌ Database URL test failed: {e}&quot;)&#10;        return False&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    print(&quot; Running simplified tests...&quot;)&#10;    &#10;    if test_basic_imports():&#10;        print(&quot;\n Testing database URL...&quot;)&#10;        test_database_url()&#10;        print(&quot;\n✅ Basic tests completed successfully!&quot;)&#10;    else:&#10;        print(&quot;\n❌ Basic tests failed!&quot;)&#10;        sys.exit(1)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="/tmp/create-database-fixed.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="/tmp/create-database-fixed.sql" />
              <option name="updatedContent" value="CREATE SCHEMA IF NOT EXISTS raffles_schema;&#10;&#10;SET search_path TO raffles_schema, public;&#10;&#10;CREATE TABLE proyects (&#10;    id SERIAL PRIMARY KEY,&#10;    name VARCHAR(100) NOT NULL,&#10;    description TEXT,&#10;    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    isActive BOOL DEFAULT true&#10;);&#10;&#10;CREATE TABLE rafflesSet (&#10;    id SERIAL PRIMARY KEY,&#10;    proyect_id INTEGER REFERENCES proyects(id),&#10;    name VARCHAR(100) NOT NULL,&#10;    type VARCHAR(8) NOT NULL CHECK (type IN ('online', 'physical')),&#10;    init INTEGER NOT NULL,&#10;    final INTEGER NOT NULL,&#10;    unit_price INTEGER NOT NULL ,&#10;    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    CONSTRAINT valid_numbers CHECK (init &lt; final),&#10;    CONSTRAINT unique_set UNIQUE (proyect_id, name)&#10;);&#10;&#10;CREATE TABLE buyers (&#10;    id SERIAL PRIMARY KEY,&#10;    name VARCHAR(100) NOT NULL,&#10;    email VARCHAR(100) UNIQUE NOT NULL,&#10;    phone VARCHAR(20),&#10;    register_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#10;);&#10;&#10;CREATE TABLE raffles ( -- Units&#10;    set_id INTEGER NOT NULL REFERENCES rafflesSet(id),&#10;    number INTEGER NOT NULL,&#10;    sell_date TIMESTAMP,&#10;    buyer_id INTEGER,&#10;    payment_method VARCHAR(50) CHECK (payment_method in ('CASH', 'CARD', 'TRANSFER', 'OTHER')),&#10;    state VARCHAR(20) DEFAULT 'available' CHECK (state IN ('available', 'sold', 'reserved')),&#10;    FOREIGN KEY (buyer_id) REFERENCES buyers(id),&#10;    PRIMARY KEY (set_id, number)&#10;);&#10;&#10;CREATE OR REPLACE FUNCTION generate_raffles()&#10;RETURNS TRIGGER AS $$&#10;DECLARE&#10;    next_number INTEGER;&#10;    count_numbers INTEGER;&#10;BEGIN&#10;&#10;    SELECT COALESCE(MAX(number), 0) + 1 INTO next_number FROM raffles;&#10;&#10;    -- Calculate how many numbers we need to generate&#10;    count_numbers := NEW.final - NEW.init + 1;&#10;&#10;    -- Update the rafflesSet with the actual init and final values&#10;    UPDATE rafflesSet&#10;    SET init = next_number,&#10;        final = next_number + count_numbers - 1&#10;    WHERE id = NEW.id;&#10;&#10;    -- Insert the raffle numbers&#10;    INSERT INTO raffles (set_id, number)&#10;    SELECT NEW.id, generate_series(next_number, next_number + count_numbers - 1);&#10;&#10;    RETURN NEW;&#10;END;&#10;$$ LANGUAGE plpgsql;&#10;&#10;CREATE TRIGGER trig_generate_raffles&#10;AFTER INSERT ON rafflesSet&#10;FOR EACH ROW&#10;EXECUTE FUNCTION generate_raffles();" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>